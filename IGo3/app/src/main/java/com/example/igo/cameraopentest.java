package com.example.igo;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.FileProvider;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;
import android.widget.VideoView;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
public class cameraopentest extends AppCompatActivity {
    private Toserversend server;
    private ProgressDialog mProgressBar;
    private Handler mHandler;
    public String className;
    private static final int CAMERA_CAP = 1111;
    public Bitmap photo;
    public String resp;
    public String response;
    public static String currentPhotoPath;
    public File image;
    public ImageView imgvw;
    public void onBackPressed() {
        Intent i=new Intent(cameraopentest.this,takeattendance.class);
        startActivity(i);
        finish();
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.cameraopentest);
        server=new Toserversend();
        server.url+="/imageUpload";
        resp=new String();
        Button recordButton = (Button) findViewById(R.id.recordButton);
        className=getIntent().getStringExtra("class");
        //Toast.makeText(getApplicationContext(),className.toLowerCase(),Toast.LENGTH_SHORT).show();
        imgvw=(ImageView)findViewById(R.id.imagevw);
        if ((ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA)) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA}, 100);
        }
       camacces();
        recordButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                camacces();
            }
        });
        Button uploadbutton=(Button) findViewById(R.id.uploadButton);
        uploadbutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    sendPic();
                    System.out.println(resp);
                    Thread t1=new Thread(new Runnable() {
                        @Override
                        public void run() {
                            Looper.prepare();
                            notificationDialog();
                            Looper.loop();
                        }
                    });
                    t1.start();
                    try {
                        Thread.sleep(10000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    resp=server.resp;
                    //notificationDialog();
                    //Toast.makeText(getApplicationContext(),"Loop Exited",Toast.LENGTH_SHORT).show();
                    //if(server.response) Toast.makeText(getApplicationContext(),"List2:"+resp,Toast.LENGTH_SHORT).show();
                    //else{
                        //Toast.makeText(getApplicationContext(),"Not Updated",Toast.LENGTH_SHORT).show();
//                    System.out.println("Printing\n\n"+resp);
                    Intent i=new Intent(cameraopentest.this,manualattendance.class);
                    i.putExtra("List",resp);
                    i.putExtra("class",className);
                    i.putExtra("type","aa");
                    finish();
                    overridePendingTransition(0, 0);
                    startActivity(i);
                    overridePendingTransition(0, 0);
                }
                catch(FileNotFoundException e){
                    Toast.makeText(getApplicationContext(),"File Not Found",Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
    public void camacces(){
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        // Ensure that there's a camera activity to handle the intent
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            // Create the File where the photo should go
            File photoFile = null;
            try {
                System.out.println("\n\ncallcreateImageFIle\n\n");
                photoFile = createImageFile();
                System.out.println("\n\nImageCreated:"+photoFile.getAbsolutePath()+"\n\n");
            } catch (IOException ex) {
                // Error occurred while creating the File
                System.out.println("\n\nException\n\n");
            }
            // Continue only if the File was successfully created
            if (photoFile != null) {
                Uri photoURI = FileProvider.getUriForFile(this,
                        "com.example.igo.fileprovider",
                        photoFile);
                System.out.println("\n\n"+photoURI.toString()+"\n\n");
                System.out.println("\n\ncreatedUri:"+photoURI.toString()+"\n\n");
                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(takePictureIntent, CAMERA_CAP);
            }
        }
    }
    @Override
    protected void onActivityResult(int requestCode,
                                    int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == CAMERA_CAP) {
            if (resultCode == RESULT_OK) {
//                Bitmap bp = (Bitmap) data.getExtras().get("data");
                setPic();
                galleryAddPic();
                Toast.makeText(getApplicationContext(),"CAPTURE OKAY",Toast.LENGTH_SHORT).show();
            } else if (resultCode == RESULT_CANCELED) {
                Toast.makeText(this, "Photo Capturing cancelled.",
                        Toast.LENGTH_LONG).show();
                Intent i = new Intent(cameraopentest.this, takeattendance.class);
                startActivity(i);
            } else {
                Toast.makeText(this, "Failed to take photo",
                        Toast.LENGTH_LONG).show();
                Intent i = new Intent(cameraopentest.this, takeattendance.class);
                startActivity(i);
            }
        }
    }
    private void sendPic() throws FileNotFoundException {
        server.params.add("classname",className.toLowerCase());
        server.params.put("pic",image);
       Thread t1=new Thread(new Runnable() {
           @Override
           public void run() {
               Looper.prepare();
               server.picsend(getApplicationContext());
               Looper.loop();
           }
       });
       t1.start();
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == 100) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(getApplicationContext(), "Permission granted", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(getApplicationContext(), "Permission denied", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void notificationDialog() {
        mHandler=new Handler();
        mProgressBar= new ProgressDialog(cameraopentest.this);
        mProgressBar.setMax(100);
        mProgressBar.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        mProgressBar.show();
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 100; i++) {
                    final int currentProgressCount = i;
                    try {
                        Thread.sleep(150);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    mHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            mProgressBar.setProgress(currentProgressCount);
                        }
                    });
                }
                resp=server.resp;
            }
        }).start();
    }

    private File createImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        System.out.println("\n\nImageName:"+imageFileName+"\n\n");
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        image = File.createTempFile(
                imageFileName,  /* prefix */
                ".jpg",         /* suffix */
                storageDir      /* directory */
        );
        // Save a file: path for use with ACTION_VIEW intents
        currentPhotoPath = image.getAbsolutePath();
        galleryAddPic();
        return image;
    }
    private void galleryAddPic() {
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        File f = new File(currentPhotoPath);
        Uri contentUri = Uri.fromFile(f);
        mediaScanIntent.setData(contentUri);
        //System.out.println("\n\nImageCreated"+f.getAbsolutePath()+"\n\n");
        this.sendBroadcast(mediaScanIntent);
        System.out.println("\n\nBroadcast Sent\n\n");
    }
    private void setPic() {
        imgvw.setImageURI(Uri.fromFile(image));
    }
}